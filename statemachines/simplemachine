class StartCommand(Command):
	pass
class NoUseCommand(Command):
	pass
class GotoBetCommand(Command):
	pass
class BetCommand(Command):
	pass
class FinishCommand(Command):
	pass
	

class DemoActions(object):
	@classmethod
	def entryIdleAction(cls, cmd):
		print "enter idle"
		
	@classmethod
	def gotoBetAction(cls, cmd):
		if not isinstance(cmd, GotoBetCommand):
			return State.STATE_CONTINUE
		return cmd.findStateByName('bet')
		
	@classmethod
	def doNothingAction(self, cmd):
		return State.STATE_CONTINUE
		
class IdleState(State):
	def __init__(self):
		super(IdleState, self).__init__('idle')
		self.addEntryAction(DemoActions.enterIdleAction)
		self.addExitAction(DemoActions.leaveIdleAction)
		self.addAction(DemoActions.gotoBetAction)
		
class DemoStateMachine(StateMachine):
	def __init__(self):
		super(DemoStateMachine, self).__init__()
		self._initIdleState = self.addState(IdleState())
		playState = PlayState()
		playState.addChildState(BetState())
		finishState = FinishState()
		finishState.addChildState(SettleState())
		self.addState(playState)
		self.addState(finishState)
		
	@property
	def initState(self):
		return self._initIdleState
		
if __name__ == "__main__":
	try:
		sm = DemoStateMachine()
		initState = sm.initState
		initState._transform(None, initState, StartCommand())
		
		curState = initState
		curState = curState.processCommand(GotoBetCommand())
		
	except:
		pass
		
		
		
